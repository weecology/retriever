#!/usr/bin/env python
from __future__ import print_function

from future import standard_library

standard_library.install_aliases()
from distutils.version import LooseVersion
import os
import re
import sys
import subprocess
import requests

pattern = re.compile(r'[."]version[\'"\s":=]+(\d+\.\d+.\d+)')
version_dict = {}

version_file = requests.get(
    "https://raw.githubusercontent.com/weecology/retriever/master/version.txt").text
version_file = version_file.splitlines()[1:]

def to_string(value):
    if sys.version_info >= (3, 0, 0):
        return value.decode("UTF-8")
    else:
        return value


for line in version_file:
    key, value = line.split(",")
    version_dict[key] = value


def get_script_version(file_name):
    file_name = os.path.basename(file_name)
    return LooseVersion(version_dict[file_name])


# check and get script directory changes
subprocess.check_output(
    'git fetch https://github.com/weecology/retriever.git master', shell=True)

output = subprocess.check_output(
    "git diff --name-only FETCH_HEAD scripts", shell=True)

# get list of changed scripts
scripts_changed = to_string(output).splitlines()

# get the changed scripts staged for the next commit relative to HEAD for scripts which are MODIFIED
modified_staged_scripts = to_string(subprocess.check_output(
    "git diff --cached --name-only --diff-filter=aMd scripts", shell=True))

# get the scripts staged for the next commit relative to HEAD for scripts which are ADDED (new) or deleted
added_deleted_staged_scripts = to_string(subprocess.check_output(
    "git diff --cached --name-only --diff-filter=AmD scripts", shell=True))

# Check to see if we have any modified scripts that are staged.
# We can skip this completely if there are only added or deleted scripts
if modified_staged_scripts != "":
    versions_not_changed = []  # if script changes we expect to change the version
    versions_updated = True

    for file in scripts_changed:
        if file in modified_staged_scripts:
            # add the file if both staged and edited
            subprocess.check_output("git add {}".format(file), shell=True)
            output = to_string(subprocess.check_output('cat {}'.format(file), shell=True))
            match = re.search(pattern, output)
            script_current_version = LooseVersion(match.group(1))

            if os.path.basename(file) in version_dict.keys():
                if not script_current_version > get_script_version(file):
                    versions_not_changed.append(file)
                    versions_updated = False

    if not versions_updated:
        print("\nThese scripts have changed, update the version numbers before commit:")
        for items in versions_not_changed:
            print(items)
        exit(1)

# only runs version.py if we have modified scripts which have had their versions updated,
# or we have no modified scripts but either deleted or added scripts.
if (modified_staged_scripts and versions_updated) or (added_deleted_staged_scripts != ""):
    print("Updating version.txt")
    os.system('python version.py')
    print("version.txt added to commit")
    os.system('git add version.txt')
