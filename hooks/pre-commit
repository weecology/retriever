#!/usr/bin/env python
from __future__ import print_function
from future import standard_library

standard_library.install_aliases()
from distutils.version import LooseVersion
import os
import re
import sys
import subprocess
import urllib.request


pattern = re.compile(r'[."]version[\'"\s":=]+(\d+\.\d+.\d+)')
version_dict = {}
version_file = urllib.request.urlopen(
    "https://raw.githubusercontent.com/weecology/retriever/master/version.txt")
version_file.readline()


def to_string(value):
    if sys.version_info >= (3, 0, 0):
        return value.decode("UTF-8")
    else:
        return value


for line in version_file:
    key, value = to_string(line).split(",")
    version_dict[key] = value


def get_script_version(file_name):
    file_name = os.path.basename(file_name)
    return LooseVersion(version_dict[file_name])


# check and get script directory changes
subprocess.check_output(
    'git fetch https://github.com/weecology/retriever.git master', shell=True)

output = subprocess.check_output(
    "git diff --name-only FETCH_HEAD scripts", shell=True)

# get list of changed scripts
scripts_changed = to_string(output).splitlines()

# get the changes staged for the next commit relative to HEAD
staged_scripts = to_string(subprocess.check_output(

    "git diff --cached --name-only --diff-filter=AMd scripts", shell=True))

versions_not_changed = []  # if script changes we expect to change the version
versions_updated = True
for file in scripts_changed:
    if file in staged_scripts:
        # add the file if both staged and edited
        subprocess.check_output("git add {}".format(file), shell=True)
        output = to_string(subprocess.check_output('cat {}'.format(file), shell=True))
        match = re.search(pattern, output)
        script_current_version = LooseVersion(match.group(1))
        if not script_current_version > get_script_version(file):
            versions_not_changed.append(file)
            versions_updated = False

if scripts_changed and not versions_updated:
    print("\nThese scripts have changed, update the version numbers before commit:")
    for items in versions_not_changed:
        print(items)
    exit(1)

if staged_scripts and versions_updated:
    print("Updating version.txt")
    os.system('python version.py')
    print("version.txt added to commit")
    os.system('git add version.txt')